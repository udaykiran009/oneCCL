#%Module1.0#####################################################################
##
## Intel(R) oneAPI Collective Communications Library modulefile
##

set min_tcl_ver 8.4
if { $tcl_version < $min_tcl_ver } {
    puts stderr " "
    puts stderr "ERROR: This modulefile requires tcl $min_tcl_ver or greater."
    puts stderr "Your system reports that tclsh version $tcl_version is installed."
    exit 1
}

# get full pathname for this script file
set scriptpath "${ModulesCurrentModulefile}"

# if modulefile script name is a symlink, resolve it
if { "[file type "$scriptpath"]" eq "link" } {
    set scriptpath "[file readlink "$scriptpath"]"
}

# if fullpath contains links, resolve them
set scriptpath "[file normalize "$scriptpath"]"

# get directory holding this modulefile script and others
set modulefileroot "[file dirname "$scriptpath"]"

# get name of modulefile script we are loading
set modulefilename "[file tail "$scriptpath"]"

# determine modulefile script version
set modulefilever "[file dirname "$modulefileroot"]"
set modulefilever "[file tail "$modulefilever"]"

# point to component top-level root folder
set componentroot "[file dirname "$modulefileroot"]"
set componentroot "[file dirname "$componentroot"]"

# get component folder name
set componentname "[file tail "$componentroot"]"

# get oneAPI top-level root folder
set oneapiroot "[file dirname "$componentroot"]"

# On load print component name and version being loaded
if { [ module-info mode load ] } {
    puts stderr "Loading $modulefilename version $modulefilever"
}

# On remove print component name and version being removed
if { [ module-info mode ] == "unload" || [ module-info mode ] == "remove" } {
    puts stderr "Removing $modulefilename version $modulefilever"
}


# ###### Component Specific env vars setup ###################################

module-whatis "Intel(R) oneAPI Collective Communications Library"

set ccl_conf "cpu_gpu_dpcpp"

if { [info exists ::env(CCL_CONFIGURATION) ] } {
    switch "$::env(CCL_CONFIGURATION)" {
        "cpu_gpu_dpcpp" -
        "cpu_icc" {
            set ccl_conf "$::env(CCL_CONFIGURATION)"
        }
        default {
        }
    }
}

set                topdir                               "$componentroot/$modulefilever"

setenv             CCL_ROOT                             "$topdir"
setenv             CCL_CONFIGURATION                    "$ccl_conf"

prepend-path       LD_LIBRARY_PATH                      "$topdir/lib/$ccl_conf"
prepend-path       LIBRARY_PATH                         "$topdir/lib/$ccl_conf"
prepend-path       CPATH                                "$topdir/include/$ccl_conf"

