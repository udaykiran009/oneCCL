#!/bin/bash
# shellcheck shell=sh

print_help()
{
    echo ""
    echo "Usage: vars.sh [--ccl-configuration[=cpu_icc|cpu_gpu_dpcpp]]"
    echo ""
    echo "By default, --ccl-configuration=cpu_gpu_dpcpp"
    echo "The arguments to the sourced script might be ignored"
    echo "(consult the documentation for the shell you are using)." 
    echo "The alternative way to pass the value of ccl-configuration"
    echo "to the script is through CCL_CONFIGURATION environment variable."
    echo ""
}

get_script_path() (
  script="$1"
  while [ -L "$script" ] ; do
    # combining next two lines fails in zsh shell
    script_dir=$(command dirname -- "$script")
    script_dir=$(cd "$script_dir" && command pwd -P)
    script="$(readlink "$script")"
    case $script in
      (/*) ;;
       (*) script="$script_dir/$script" ;;
    esac
  done
  # combining next two lines fails in zsh shell
  script_dir=$(command dirname -- "$script")
  script_dir=$(cd "$script_dir" && command pwd -P)
  echo "$script_dir"
)

usage() {
  printf "%s\n"   "ERROR: This script must be sourced."
  printf "%s\n"   "Usage: source $1"
  exit 255
}

vars_script_name=""

if [ -n "${ZSH_VERSION:-}" ] ; then     # only executed in zsh
  # echo "   ZSH version = \"$ZSH_VERSION\""
  case $ZSH_EVAL_CONTEXT in (*:file*) vars_script_name="${(%):-%x}" ;; esac ;
  if [ -n "$ZSH_EVAL_CONTEXT" ] && [ "" = "$vars_script_name" ] ; then
    usage "${(%):-%x}" ;
  fi
elif [ -n "${KSH_VERSION:-}" ] ; then   # only executed in ksh
  # echo "   KSH version = \"$KSH_VERSION\""
  if [ "$(set | grep KSH_VERSION)" = "KSH_VERSION=.sh.version" ] ; then # ksh
    if [ "$(cd "$(dirname -- "$0")" && pwd -P)/$(basename -- "$0")" \
      != "$(cd "$(dirname -- "${.sh.file}")" && pwd -P)/$(basename -- "${.sh.file}")" ] ; then
        vars_script_name="${.sh.file}" || usage "$0" ;
    fi
  else
    _lmksh="$(basename -- "$0")" ;
    if [ "mksh" = "$_lmksh" ] || [ "lksh" = "$_lmksh" ] || [ "ksh" = "$_lmksh" ] ; then
      # force [lm]ksh to issue error msg; contains this script's rel/path/filename
      vars_script_name="$( (echo "${.sh.file}") 2>&1 )" || : ;
      vars_script_name="$(expr "$vars_script_name" : '^.*ksh: \(.*\)\[[0-9]*\]:')" ;
    fi
  fi
elif [ -n "${BASH_VERSION:-}" ] ; then  # only executed in bash
  # echo "   BASH version = \"$BASH_VERSION\""
  # shellcheck disable=2128,2015
  (return 0 2>/dev/null) && vars_script_name="${BASH_SOURCE}" || usage "${BASH_SOURCE}"
else
  case ${0##*/} in (sh|dash) vars_script_name="" ;; esac
  # echo "   Shell version = \"unknown\""
fi

if [ "" = "$vars_script_name" ] ; then
  >&2 echo ":: ERROR: Unable to proceed: no support for sourcing from '[dash|sh]' shell." ;
  >&2 echo "   This script must be sourced. Did you execute or source this script?" ;
  >&2 echo "   Can be caused by sourcing from inside a \"shebang-less\" script." ;
  >&2 echo "   Can also be caused by sourcing from ZSH version 4.x or older." ;
  return 1 2>/dev/null || exit 1
fi

WORK_DIR=$(get_script_path "$vars_script_name")
CCL_ROOT="$(cd "${WORK_DIR}"/../; pwd -P)"; export CCL_ROOT

if [ -z "${CCL_CONFIGURATION}" ]
then
    CCL_CONFIGURATION=cpu_gpu_dpcpp
fi

args=$*
for arg in $args
do
    case "$arg" in
        --ccl-configuration=*)
            ccl_configuration="${arg#*=}"
            ;;
    esac
done

case "$ccl_configuration" in
    cpu_gpu_dpcpp|cpu_icc)
        ;;
    *)
        ccl_configuration="cpu_gpu_dpcpp"
        ;;
esac
CCL_CONFIGURATION="${ccl_configuration}"; export CCL_CONFIGURATION

CCL_ATL_TRANSPORT_PATH="${CCL_ROOT}/lib/${ccl_configuration}"; export CCL_ATL_TRANSPORT_PATH

CPATH="${CCL_ROOT}/include/${ccl_configuration}${CPATH+:${CPATH}}"; export CPATH
LIBRARY_PATH="${CCL_ROOT}/lib/${ccl_configuration}${LIBRARY_PATH+:${LIBRARY_PATH}}"; export LIBRARY_PATH
LD_LIBRARY_PATH="${CCL_ROOT}/lib/${ccl_configuration}${LD_LIBRARY_PATH+:${LD_LIBRARY_PATH}}"; export LD_LIBRARY_PATH
